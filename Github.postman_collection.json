{
	"info": {
		"_postman_id": "faebee34-5254-4995-a216-997f4002ba0d",
		"name": "Github",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST Create new repo",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const repoName=generateRepoName();\r",
							"\r",
							"function generateRepoName()\r",
							"{\r",
							"    const repo=\"Repo\" + parseInt(Math.random() * 10000);\r",
							"    console.log(repo)\r",
							"    return repo\r",
							"}\r",
							"pm.globals.set(\"global_repoName\", repoName);\r",
							"\r",
							"console.log(pm.request.toJSON);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify Github Repo Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(pm.globals.get(\"global_repoName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Verify owner\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.owner.login).to.eql(pm.environment.get(\"github_owner\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{github_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{global_repoName}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{github_url}}/user/repos",
					"host": [
						"{{github_url}}"
					],
					"path": [
						"user",
						"repos"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Repos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"console.log(response.length)\r",
							"\r",
							"for(i=0;i<response.length;i++)\r",
							"{\r",
							"    console.log(response[i].name,response[i].owner.login)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{github_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{github_url}}/user/repos",
					"host": [
						"{{github_url}}"
					],
					"path": [
						"user",
						"repos"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Create issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"pm.globals.set(\"global_issueId\", response.number);\r",
							"\r",
							"pm.test(\"Verify owner\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.user.login).to.eql(pm.environment.get(\"github_owner\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Issue Number Type\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.number).to.not.string\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{github_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Found a bug\",\r\n    \"body\": \"I'm having a problem with this.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{github_url}}/repos/:owner/:repo/issues",
					"host": [
						"{{github_url}}"
					],
					"path": [
						"repos",
						":owner",
						":repo",
						"issues"
					],
					"variable": [
						{
							"key": "owner",
							"value": "{{github_owner}}"
						},
						{
							"key": "repo",
							"value": "{{global_repoName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Issue list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"check issue name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].title).to.eql(\"Found a bug\");\r",
							"});\r",
							"\r",
							"const id = pm.globals.get(\"global_issueId\");\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].number).to.eql(id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{github_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{github_url}}/repos/:owner/:repo/issues",
					"host": [
						"{{github_url}}"
					],
					"path": [
						"repos",
						":owner",
						":repo",
						"issues"
					],
					"variable": [
						{
							"key": "owner",
							"value": "{{github_owner}}"
						},
						{
							"key": "repo",
							"value": "{{global_repoName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Add Comments to issues",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{github_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"body\":\"body text\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{github_url}}/repos/:owner/:repo/issues/:issue_number/comments",
					"host": [
						"{{github_url}}"
					],
					"path": [
						"repos",
						":owner",
						":repo",
						"issues",
						":issue_number",
						"comments"
					],
					"variable": [
						{
							"key": "owner",
							"value": "{{github_owner}}"
						},
						{
							"key": "repo",
							"value": "{{global_repoName}}"
						},
						{
							"key": "issue_number",
							"value": "{{global_issueId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{github_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{github_url}}/repos/:owner/:repo",
					"host": [
						"{{github_url}}"
					],
					"path": [
						"repos",
						":owner",
						":repo"
					],
					"variable": [
						{
							"key": "owner",
							"value": "{{github_owner}}"
						},
						{
							"key": "repo",
							"value": "{{global_repoName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Deleted repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{github_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{github_url}}/repos/:owner/:repo",
					"host": [
						"{{github_url}}"
					],
					"path": [
						"repos",
						":owner",
						":repo"
					],
					"variable": [
						{
							"key": "owner",
							"value": "{{github_owner}}"
						},
						{
							"key": "repo",
							"value": "{{global_repoName}}"
						}
					]
				}
			},
			"response": []
		}
	]
}